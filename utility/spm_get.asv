function varargout = spm_get(Action, varargin)
% compatibility function to allow spm_get calls with SPM5
%
% SPM5 uses a function called spm_select to do file selection instead of
% the spm_get of versions 96-2.  This breaks a lot of old code; here we
% wrap the most common calls to spm_get so that we can use
% spm_select. I've only wrapped the spm_get calls used in marsbar.
%
% Usually, file / directory selection call is of format:
% FORMAT P = spm_get(N, ext, prompt, newwdir)
% Input
% N        - matrix specifying what (file or dir) to select, and how
%            many to select.
% ext      - the filter for files to select
% prompt   - the prompt to display for the selection window
% newwdir  - new working directory
%
% Output
% P        - a string matrix of file names
%
% First argument can also be action string:
% FORMAT cpath = spm_get('CPath',path,cwd)
% (returns canonical version of file path 'path')
% FORMAT [files,dirs]=spm_select('files',direc,filt)
% (Returns files matching the filter (filt) and directories within dir)
%
% See spm_select from the spm5 distribution, and spm_get from spm2
% distribution
 
nout = max(nargout,1);

if nargin < 1
   Action=Inf;
end
 
% If the first argument is a string, this is an action
if ischar(Action)
   switch(lower(Action))
   case 'cpath'
     varargout = {spm_select('cpath', varargin{:})};
   case 'files'
     if nargin < 2
         Dir = pwd;
     else
         Dir = varargin{1};
     end
     if nargin < 3
         Filt = '.*';
     else
         Filt = sf_get_to_select_filt(varargin{2});
     end
     varargout = {spm_select('list', Dir, Filt)};
     % The old spm_get returned full file paths
     Files = varargout{1};
     varargout{1} = [repmat([Dir filesep], size(Files, 1), 1) Files];
       otherwise
           error([Action ': I''m sorry, but I can''t do that']);
   end
   if strcmp(Action, 'files'), Action='List'; end
  
   return
end

% Otherwise, must be file / directory selection
if nargin < 2
    Filt = 'any';
else
    Filt = varargin{1};
    varargin(1) = [];
    Filt = sf_get_to_select_filt(Filt);
end
if any(Action < 0)
    % Directory select
    Action = abs(Action);
    Filt = 'dir';
end
if nargin<3
    Prompt='Select files...';
else
    Prompt = varargin{1};
    varargin(1) = [];
end
if nargin<4
    wd = pwd;
else
    wd = varargin{1};
    varargin(1) = []; % pop processed argument
end
if length(varargin) ~= 0
    error('Sorry, we do not handle this call to spm_select');
end
varargout = {spm_select(Action, Filt, Prompt, {''}, wd)};
if isempty(varargout), return, end
% Cell array prompt should return cell array of arguments
if iscellstr(Prompt)
    if isempty(varargout{1})
        varargout{1} = {};
    else
        varargout{1} = cellstr(varargout{1});
    end
end
return

% Subfunctions
    function F = sf_get_to_select_filt(F)
        % Converts filter for old spm_get routine to something for spm_select
        if strcmpi(F, 'image'), F = lower(F); return, end
        F = sf_shexp_regexp(F); return
0111 
0112 function new_str = sf_shexp_regexp(old_str)
0113 % Does basic conversion from shell expression to regexp
0114 % Have ignored some quoting issues here:
0115 % http://www.unix.org.ua/orelly/perl/cookbook/ch06_10.htm
0116 % sub glob2pat {
0117 %    my $globstr = shift;
0118 %    my %patmap = (
0119 %        '*' => '.*',
0120 %        '?' => '.',
0121 %        '[' => '[',
0122 %        ']' => ']',
0123 %    );
0124 %    $globstr =~ s{(.)} { $patmap{$1} || "\Q$1" }ge;
0125 %    return '^' . $globstr . '$';
0126 %}
0127 
0128 new_str = '^';
0129 for c = old_str
0130   switch c
0131    case '*'
0132     nc = '.*';
0133    case '?'
0134     nc = '.';
0135    case {'.', '^', '$', '+'}
0136     nc = ['\' c]; 
0137    otherwise
0138     nc = c;
0139   end
0140   new_str = [new_str nc];
0141 end
0142 new_str = [new_str '$'];
0143 return
0144